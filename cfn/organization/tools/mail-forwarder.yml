AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  ProjectName:
    Type: String

Resources:
  # ------------------------------------------------
  # 受信ルール設定
  # ------------------------------------------------
  ReceiptRuleSet:
    Type: AWS::SES::ReceiptRuleSet
    Properties:
      RuleSetName: !Ref ProjectName

  ReceiptRule:
    Type: AWS::SES::ReceiptRule
    Properties:
      Rule:
        Actions:
          - S3Action:
              BucketName: !Ref S3Bucket
              ObjectKeyPrefix: panicboat.net/
        Enabled: true
        Name: panicboat.net
        Recipients:
          - admin@panicboat.net
          - info@panicboat.net
          - no-reply@panicboat.net
          - platform@panicboat.net
      RuleSetName: !Ref ReceiptRuleSet

  # ------------------------------------------------
  # 受信メール保存場所
  # ------------------------------------------------
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref ProjectName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      AccessControl: Private
      NotificationConfiguration:
        TopicConfigurations:
          - Event: s3:ObjectCreated:*
            Topic: !Ref SNSTopic
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      VersioningConfiguration:
        Status: Enabled

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:PutObject
            Effect: Allow
            Principal:
              Service: ses.amazonaws.com
            Resource: !Sub arn:aws:s3:::${S3Bucket}/*
            Condition:
              StringEquals:
                aws:Referer: !Ref 'AWS::AccountId'

  # ------------------------------------------------
  # 受信メールの転送処理
  # ------------------------------------------------
  Repository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref ProjectName

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ImageUri: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}:latest
      FunctionName: !Ref ProjectName
      PackageType: Image
      Role: !GetAtt LambdaRole.Arn

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      RoleName: !Sub ${ProjectName}-role

  LambdaRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${ProjectName}-task-execution-role-policy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource:
              - !Sub arn:aws:s3:::${S3Bucket}/*
          - Effect: Allow
            Action:
              - ses:SendRawEmail
            Resource:
              - '*'
      Roles:
        - Ref: LambdaRole

  # ------------------------------------------------
  # S3にメールが保存されるとLambdaを起動する設定
  # ------------------------------------------------
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Ref ProjectName
      Subscription:
        - Endpoint: !GetAtt LambdaFunction.Arn
          Protocol: lambda

  SNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          Effect: Allow
          Principal:
            Service: s3.amazonaws.com
          Action: sns:Publish
          Resource: !Ref SNSTopic
          Condition:
            ArnLike:
              aws:SourceArn: !GetAtt S3Bucket.Arn
      Topics:
        - !Ref SNSTopic

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref SNSTopic
