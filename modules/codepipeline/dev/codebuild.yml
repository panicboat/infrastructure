AWSTemplateFormatVersion: 2010-09-09

Parameters:
  PlatformName:
    Type: String
  ProductName:
    Type: String
  ProjectName:
    Type: String
  GitHubOwner:
    Type: String
  GitHubRepository:
    Type: String
  GitHubBranch:
    Type: String
  ReleaseVersion:
    Type: String
  ReleaseAccount:
    Type: String
  ContainerName:
    Type: String
  BuildDirectory:
    Type: String
  CodeBuildRole:
    Type: String
  CICredentialArn:
    Type: String
  VpcId:
    Type: AWS::EC2::VPC::Id
  ProtectedSubnets:
    Type: List<AWS::EC2::Subnet::Id>

Resources:
  Docker:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${ProjectName}-build
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_LARGE
        Image: aws/codebuild/standard:4.0
        Type: LINUX_CONTAINER
        PrivilegedMode: True
        EnvironmentVariables:
          - Name: REPOSITORY_URI
            Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ProjectName}"
          - Name: CONTAINER_NAME
            Value: !Ref ContainerName
          - Name: BUILD_DIR
            Value: !Ref BuildDirectory
      ServiceRole: !Ref CodeBuildRole
      Source:
        Type: CODEPIPELINE
        BuildSpec:
          !Join [
            "\n",
            [
              "version: 0.2",
              "",
              "env:",
              "  variables:",
              "    DOCKER_BUILDKIT: \"1\"",
              "  secrets-manager:",
        !Sub  "    GITHUB_TOKEN: \"${CICredentialArn}:GitHubPersonalAccessToken\"",
        !Sub  "    GITHUB_USER: \"${CICredentialArn}:GitHubUserName\"",
        !Sub  "    DOCKERHUB_ID: \"${CICredentialArn}:DockerHubID\"",
        !Sub  "    DOCKERHUB_PASSWORD: \"${CICredentialArn}:DockerHubPassword\"",
              "",
              "phases:",
              "  pre_build:",
              "    commands:",
              "      - echo Logging in to DockerHub...",
              "      - docker login -u ${DOCKERHUB_ID} -p ${DOCKERHUB_PASSWORD}",
              "      - echo Logging in to Amazon ECR...",
              "      - $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)",
              "      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)",
              "      - IMAGE_TAG=${COMMIT_HASH:=latest}",
              "  build:",
              "    commands:",
              "      - echo Build started on `date`",
              "      - docker build -t $REPOSITORY_URI:latest $BUILD_DIR --build-arg GITHUB_TOKEN=$GITHUB_TOKEN",
              "      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG",
              "  post_build:",
              "    commands:",
              "      - echo Build completed on `date`",
              "      - docker push $REPOSITORY_URI:latest",
              "      - docker push $REPOSITORY_URI:$IMAGE_TAG",
              "      - echo \"[{\\\"name\\\":\\\"${CONTAINER_NAME}\\\",\\\"imageUri\\\":\\\"${REPOSITORY_URI}:${IMAGE_TAG}\\\"}]\" > imagedefinitions.json",
              "artifacts:",
              "  files:",
              "    - imagedefinitions.json",
              ""
            ]
          ]
      # VpcConfig:
      #   VpcId: !Ref VpcId
      #   Subnets: !Ref ProtectedSubnets
      #   SecurityGroupIds:
      #     - { 'Fn::ImportValue': !Sub "${PlatformName}:SecurityGroup" }
      TimeoutInMinutes: 30
      Cache:
        Type: LOCAL
        Modes:
          - LOCAL_DOCKER_LAYER_CACHE

  GitHub:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${ProjectName}-github
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        Type: LINUX_CONTAINER
        PrivilegedMode: True
        EnvironmentVariables:
          - Name: GITHUB_OWNER
            Value: !Ref GitHubOwner
          - Name: GITHUB_PROJECT
            Value: !Ref GitHubRepository
          - Name: GITHUB_BRANCH
            Value: !Ref GitHubBranch
          - Name: RELEASE_VERSION
            Value: !Ref ReleaseVersion
      ServiceRole: !Ref CodeBuildRole
      Source:
        Type: CODEPIPELINE
        BuildSpec:
          !Join [
            "\n",
            [
              "version: 0.2",
              "",
              "env:",
              "  variables:",
              "    DOCKER_BUILDKIT: \"1\"",
              "  secrets-manager:",
        !Sub  "    GITHUB_TOKEN: \"${CICredentialArn}:GitHubPersonalAccessToken\"",
        !Sub  "    GITHUB_USER: \"${CICredentialArn}:GitHubUserName\"",
        !Sub  "    DOCKERHUB_ID: \"${CICredentialArn}:DockerHubID\"",
        !Sub  "    DOCKERHUB_PASSWORD: \"${CICredentialArn}:DockerHubPassword\"",
              "",
              "phases:",
              "  pre_build:",
              "    commands:",
              "      - apt-get install -y tzdata",
              "      - ln -sf /usr/share/zoneinfo/Asia/Tokyo /etc/localtime",
              "      - released=`date '+%Y%m%d%H%M'`",
              "  build:",
              "    commands:",
              "      - authorization=\"Authorization:token $GITHUB_TOKEN\"",
              "      - content_type=\"Content-Type:application/json\"",
              "      - release_tag=${RELEASE_VERSION}.$released",
              "      - release_name=${RELEASE_VERSION}.$released",
              "      - description=''",
              "      - params=\"{\\\"tag_name\\\":\\\"$release_tag\\\",\\\"target_commitish\\\":\\\"$CODEBUILD_RESOLVED_SOURCE_VERSION\\\",\\\"name\\\":\\\"$release_name\\\",\\\"body\\\":\\\"$description\\\",\\\"draft\\\":false,\\\"prerelease\\\":false}\"",
              "      - curl -X POST -H \"$authorization\" -H \"$content_type\" -d \"$params\" https://api.github.com/repos/${GITHUB_OWNER}/${GITHUB_PROJECT}/releases",
            ]
          ]
      # VpcConfig:
      #   VpcId: !Ref VpcId
      #   Subnets: !Ref ProtectedSubnets
      #   SecurityGroupIds:
      #     - { 'Fn::ImportValue': !Sub "${PlatformName}:SecurityGroup" }
      TimeoutInMinutes: 30

  Release:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${ProjectName}-release
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        Type: LINUX_CONTAINER
        PrivilegedMode: True
        EnvironmentVariables:
          - Name: REPOSITORY_URI
            Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ProjectName}"
          - Name: PRODUCTION_URI
            Value: !Sub "${ReleaseAccount}.dkr.ecr.${AWS::Region}.amazonaws.com/${ProjectName}"
          - Name: GITHUB_OWNER
            Value: !Ref GitHubOwner
          - Name: GITHUB_PROJECT
            Value: !Ref GitHubRepository
          - Name: RELEASE_VERSION
            Value: !Ref ReleaseVersion
          - Name: RELEASE_ACCOUNT
            Value: !Ref ReleaseAccount
          - Name: ASSUME_ROLE_ARN
            Value: !Sub "arn:aws:iam::${ReleaseAccount}:role/${ProjectName}-release-role"
      ServiceRole: !Ref CodeBuildRole
      Source:
        Type: CODEPIPELINE
        BuildSpec:
          !Join [
            "\n",
            [
              "version: 0.2",
              "",
              "env:",
              "  variables:",
              "    DOCKER_BUILDKIT: \"1\"",
              "  secrets-manager:",
        !Sub  "    GITHUB_TOKEN: \"${CICredentialArn}:GitHubPersonalAccessToken\"",
        !Sub  "    GITHUB_USER: \"${CICredentialArn}:GitHubUserName\"",
        !Sub  "    DOCKERHUB_ID: \"${CICredentialArn}:DockerHubID\"",
        !Sub  "    DOCKERHUB_PASSWORD: \"${CICredentialArn}:DockerHubPassword\"",
              "",
              "phases:",
              "  pre_build:",
              "    commands:",
              "      - echo Logging in to Amazon ECR...",
              "      - aws --version",
              "      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)",
              "      - IMAGE_TAG=${COMMIT_HASH:=latest}",
              "      - RELEASE_TAG=`curl -X GET -H \"Authorization:token ${GITHUB_TOKEN}\" https://api.github.com/repos/${GITHUB_OWNER}/${GITHUB_PROJECT}/releases | jq -r '. | select(.[0].tag_name | startswith(\"'$RELEASE_VERSION'\"))' | jq -r .[0].tag_name`",
              "      - if [ -z $RELEASE_TAG ]; then RELEASE_TAG=$RELEASE_VERSION; fi",
              "      - echo $RELEASE_TAG is Released...",
              "  build:",
              "    commands:",
              "      - echo Build started on `date`",
              "      - $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)",
              "      - docker pull $REPOSITORY_URI:$IMAGE_TAG",
              "      - docker tag  $REPOSITORY_URI:$IMAGE_TAG $REPOSITORY_URI:$RELEASE_VERSION",
              "      - docker tag  $REPOSITORY_URI:$IMAGE_TAG $REPOSITORY_URI:$RELEASE_TAG",
              "      - docker push $REPOSITORY_URI:$RELEASE_VERSION",
              "      - docker push $REPOSITORY_URI:$RELEASE_TAG",
              "  post_build:",
              "    commands:",
              "      - echo Pushing the Docker images...",
              "      - mkdir -p credentials",
              "      - echo \"[profile production]\" > credentials/config",
              "      - echo \"role_arn = ${ASSUME_ROLE_ARN}\" >> credentials/config",
              "      - echo \"credential_source = EcsContainer\" >> credentials/config",
              "      - export AWS_CONFIG_FILE=${CODEBUILD_SRC_DIR}/credentials/config",
              "      - aws sts get-caller-identity --profile production",
              "      - $(aws ecr get-login --registry-ids ${RELEASE_ACCOUNT} --no-include-email --region $AWS_DEFAULT_REGION --profile production)",
              "      - docker tag  $REPOSITORY_URI:$IMAGE_TAG $PRODUCTION_URI:$RELEASE_VERSION",
              "      - docker tag  $REPOSITORY_URI:$IMAGE_TAG $PRODUCTION_URI:$RELEASE_TAG",
              "      - docker push $PRODUCTION_URI:$RELEASE_VERSION",
              "      - docker push $PRODUCTION_URI:$RELEASE_TAG",
              "",
            ]
          ]
      # VpcConfig:
      #   VpcId: !Ref VpcId
      #   Subnets: !Ref ProtectedSubnets
      #   SecurityGroupIds:
      #     - { 'Fn::ImportValue': !Sub "${PlatformName}:SecurityGroup" }
      TimeoutInMinutes: 30

Outputs:
  DockerBuild:
    Value: !Ref Docker
  GitHubTag:
    Value: !Ref GitHub
  Release:
    Value: !Ref Release
